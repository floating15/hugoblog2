<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on haoming&#39;s blog</title>
    <link>/tags/python/</link>
    <description>Recent content in Python on haoming&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 04 Mar 2020 00:00:00 +0000</lastBuildDate><atom:link href="/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Perceptron Learning Algorithm</title>
      <link>/post/2020/03/04/perceptron-learning-algorithm/</link>
      <pubDate>Wed, 04 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/2020/03/04/perceptron-learning-algorithm/</guid>
      <description>import numpy as np import pandas as pd import matplotlib.pyplot as plt %matplotlib inline Linear separable Generate the data: randlist1 = np.array([np.random.uniform(-5,5) for i in range(500)]) randlist2 = np.array([np.random.uniform(0,3) for i in range(500)]) data_m1_0 = pd.DataFrame( { &amp;#34;x0&amp;#34;: 1, &amp;#34;x1&amp;#34;: randlist1, &amp;#34;x2&amp;#34;: randlist1+randlist2, &amp;#34;y&amp;#34; : -1 } ) data_p1_0 = pd.DataFrame( { &amp;#34;x0&amp;#34;: 1, &amp;#34;x1&amp;#34;: randlist1, &amp;#34;x2&amp;#34;: randlist1 - randlist2, &amp;#34;y&amp;#34; : +1 } ) data = pd.concat([data_m1_0, data_p1_0], axis=0) plt.</description>
    </item>
    
    <item>
      <title>Summary of Data Cleaning Skills</title>
      <link>/post/2019/07/08/summary-of-data-cleaning-skills/</link>
      <pubDate>Mon, 08 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/2019/07/08/summary-of-data-cleaning-skills/</guid>
      <description>Summary df.head(n) df.sample(n) df.info() df.describe() df.shape df.values df.columns df.index Sort df.sort_values( by=&amp;#34;col_name&amp;#34;, axis=0, ascending=True, inplace=False ) df.sort_index( level=[&amp;#34;outter_index&amp;#34;, &amp;#34;inner_index&amp;#34;], ascending=False ) Set index df.set_index(&amp;#34;col&amp;#34;) df.ser_index(&amp;#34;outter_index&amp;#34;, &amp;#34;inner_index&amp;#34;) df.reset_index() df.reset_index(drop=False) Subset and Slice # subset by row df[df[&amp;#34;col&amp;#34;] &amp;gt; 0] df[ (df.col1 &amp;gt; 0) &amp;amp; (df.col2 &amp;gt;0) ] df[ df.col.isin([&amp;#34;xxx&amp;#34;, &amp;#34;yyy&amp;#34;]) ] # with loc method df.loc[ [&amp;#34;outer_index1&amp;#34;, &amp;#34;outer_index_2&amp;#34;] ] df.loc[ [ (&amp;#34;outer_index_1&amp;#34;, &amp;#34;inner_index_1&amp;#34;), (&amp;#34;outer_index_2&amp;#34;, &amp;#34;inner_index_2&amp;#34;), (&amp;#34;outer_index_3&amp;#34;, &amp;#34;inner_index_3&amp;#34;), ] ] df.loc[ &amp;#34;outer_index_i&amp;#34; : &amp;#34;outer_index_j&amp;#34; ] df.</description>
    </item>
    
    <item>
      <title>Python - 1. Data Manipulation with pandas</title>
      <link>/post/2018/08/08/python-1.-data-manipulation-with-pandas/</link>
      <pubDate>Wed, 08 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018/08/08/python-1.-data-manipulation-with-pandas/</guid>
      <description>import pandas as pd import numpy as np 1. Transforming DataFrames 1.1 Introducing DataFrames Inspecting a DataFrame When you get a new DataFrame to work with, the first thing you need to do is explore it and see what it contains. pandas has several methods for this.
head method (.head()) returns the first few rows of the DataFrame.
# create a DataFrame cate = [&amp;#34;Py&amp;#34;, &amp;#34;R&amp;#34;, &amp;#34;Matlab&amp;#34; ] df = pd.</description>
    </item>
    
  </channel>
</rss>
