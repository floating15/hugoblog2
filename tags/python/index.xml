<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on haoming&#39;s blog</title>
    <link>/tags/python/</link>
    <description>Recent content in Python on haoming&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 23 Apr 2020 00:00:00 +0000</lastBuildDate><atom:link href="/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Data Visualization III (Seaborn)</title>
      <link>/post/2020/04/23/data-visualization-iii-seaborn/</link>
      <pubDate>Thu, 23 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/2020/04/23/data-visualization-iii-seaborn/</guid>
      <description>All figures in this blog are embedded by Github Image Hosting Service. These figures may not be displayed on mobile devices.
 [toc]
1. Seaborn Introduction 1.1 Distribution plot The pandas library supports simple plotting of data, which is very convenient when data is already likely to be in a pandas DataFrame.
df[&amp;#39;Award_Amount&amp;#39;].plot.hist() plt.show() plt.clf() # &amp;lt;-- Clear out the pandas histogram Seaborn generally does more statistical analysis on data and can provide more sophisticated insight into the data.</description>
    </item>
    
    <item>
      <title>Data Visualization II (Seaborn)</title>
      <link>/post/2020/04/20/data-visualization-ii-seaborn/</link>
      <pubDate>Mon, 20 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/2020/04/20/data-visualization-ii-seaborn/</guid>
      <description>All figures in this blog are embedded by Github Image Hosting Service. These figures may not be displayed on mobile devices.
 [toc]
1. Introduction to Seaborn 1.1 Using pandas with Seaborn # Import Matplotlib and Seaborn import matplotlib.pyplot as plt import seaborn as sns To create a count plot with a pandas DataFrame column instead of a list of data, set x (or y) equal to the name of the column in the DataFrame.</description>
    </item>
    
    <item>
      <title>Data Visualization I (Matplotlib)</title>
      <link>/post/2020/04/16/data-visualization-i-matplotlib/</link>
      <pubDate>Thu, 16 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/2020/04/16/data-visualization-i-matplotlib/</guid>
      <description>All figures in this blog are embedded by Github Image Hosting Service. These figures may not be displayed on mobile devices.
 [toc]
1. Introduction to Matplotlib 1.1 Intro to data visualization with matplotlib we will use the main object-oriented interface. This interface is provided through the pyplot submodule. The plt.subplots() command, when called without any inputs, creates two different objects: a Figure object and an Axes object.
import matplotlib.</description>
    </item>
    
    <item>
      <title>Perceptron Learning Algorithm</title>
      <link>/post/2020/03/04/perceptron-learning-algorithm/</link>
      <pubDate>Wed, 04 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/2020/03/04/perceptron-learning-algorithm/</guid>
      <description>import numpy as np import pandas as pd import matplotlib.pyplot as plt %matplotlib inline Linear separable Generate the data: randlist1 = np.array([np.random.uniform(-5,5) for i in range(500)]) randlist2 = np.array([np.random.uniform(0,3) for i in range(500)]) data_p1_0 = pd.DataFrame( { &amp;#34;x0&amp;#34;: 1, &amp;#34;x1&amp;#34;: randlist1, &amp;#34;x2&amp;#34;: randlist1 + randlist2, &amp;#34;y&amp;#34; : -1 } ) data_m1_0 = pd.DataFrame( { &amp;#34;x0&amp;#34;: 1, &amp;#34;x1&amp;#34;: randlist1, &amp;#34;x2&amp;#34;: randlist1 - randlist2, &amp;#34;y&amp;#34; : +1 } ) df = pd.concat([data_m1_0, data_p1_0], axis=0) PLA model plt.</description>
    </item>
    
    <item>
      <title>Object Oriented Programming III (Class)</title>
      <link>/post/2019/08/20/object-oriented-programming-iii-class/</link>
      <pubDate>Tue, 20 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/2019/08/20/object-oriented-programming-iii-class/</guid>
      <description>[toc]
1. OOP Fundamental 1.1 Attributes and Method class Employee: def set_name(self, new_name): self.name = new_name def set_salary(self, new_salary): self.salary = new_salary def give_raise(self, amount): self.salary = self.salary + amount def monthly_salary(self): return self.salary / 12 method = function; attribute = variable
# self 就是对象 object 的替身 emp = Employee() emp.set_salary(1000) # 理解为 set_salary(emp, 10000)  self.salary # 理解为 emp.salary variable 可以打印, 也可以赋值
emp.salary = emp.salary + 5000 # e.t. emp.</description>
    </item>
    
    <item>
      <title>Object Oriented Programming II (Iterators, Comprehensions &amp; Generators)</title>
      <link>/post/2019/08/16/object-oriented-programming-ii-iterators-comprehensions-generators/</link>
      <pubDate>Fri, 16 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/2019/08/16/object-oriented-programming-ii-iterators-comprehensions-generators/</guid>
      <description>All figures in this blog are embedded by Github Image Hosting Service. These figures may not be displayed on mobile devices.
 [toc]
1. Iterators in PythonLand 1.1 Introduction to iterators When you use a for loop to print out each element of a list, you&amp;rsquo;re iterating over the list. You can also use a for loop to iterate over characters in a string. You can also use a for loop to iterate a over a sequence of numbers produced by a special range object.</description>
    </item>
    
    <item>
      <title>Object Oriented Programming I (Function)</title>
      <link>/post/2019/08/14/object-oriented-programming-i-function/</link>
      <pubDate>Wed, 14 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/2019/08/14/object-oriented-programming-i-function/</guid>
      <description>[toc]
1. Writing Functions 1.1 Define function To define the function, We begin with the keyword def, followed by the function name; this is then followed by a set of parentheses and a colon. This piece of code is called a function header. To complete the function definition, We write the function body inside the indentation.
There&amp;rsquo;s an essential aspect of writing functions in Python: docstrings. Docstrings serve as documentation for your function so that anyone who reads your function&amp;rsquo;s docstring understands what your function does, without having to trace through all the code in the function definition.</description>
    </item>
    
    <item>
      <title>Python Data Manipulate</title>
      <link>/post/2019/07/08/python-data-manipulate/</link>
      <pubDate>Mon, 08 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/2019/07/08/python-data-manipulate/</guid>
      <description>Overview df.head(x) df.info() df.describe() df.shape df.values df.columns df.index df.sort_values(by=&amp;#34;col&amp;#34;).tail(n) # n largest, e.t. df.nlargest(n, &amp;#34;col&amp;#34;) df.sample(n) # Return n random samples df.sample(frac=0.3) # Return a random sample of 30 percent df.sample(frac=1) # Shuffle df.corr() df.diff() Sort df.sort_values( by=&amp;#34;col_name&amp;#34;, axis=0, ascending=True, inplace=False ) df.sort_values( by=[&amp;#34;col1&amp;#34;, &amp;#34;col2&amp;#34;, &amp;#34;col3&amp;#34;], ascending=[True, False, True] # sort col1 by ascending; sort col2 by descending; sort col3 by ascending ) df.sort_index( level=[&amp;#34;outter_index&amp;#34;, &amp;#34;inner_index&amp;#34;], ascending=False ) Set index df.</description>
    </item>
    
    <item>
      <title>Python - 1. Data Manipulation with pandas</title>
      <link>/post/2018/08/08/python-1.-data-manipulation-with-pandas/</link>
      <pubDate>Wed, 08 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018/08/08/python-1.-data-manipulation-with-pandas/</guid>
      <description>import pandas as pd import numpy as np 1. Transforming DataFrames 1.1 Introducing DataFrames Inspecting a DataFrame When you get a new DataFrame to work with, the first thing you need to do is explore it and see what it contains. pandas has several methods for this.
head method (.head()) returns the first few rows of the DataFrame.
# create a DataFrame cate = [&amp;#34;Py&amp;#34;, &amp;#34;R&amp;#34;, &amp;#34;Matlab&amp;#34; ] df = pd.</description>
    </item>
    
  </channel>
</rss>
